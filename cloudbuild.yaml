steps:
  # Step 1: Authenticate Docker with Artifact Registry
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - -c
      - |
        echo "Configuring Docker authentication for Artifact Registry..."
        gcloud auth configure-docker europe-west1-docker.pkg.dev --quiet

  # Step 1.5: Lint
  - name: 'python:3.11-slim'
    entrypoint: bash
    args:
      - -c
      - |
        pip install -r requirements.txt flake8 pytest >/dev/null
        flake8 .

  # Step 1.6: Run tests
  - name: 'python:3.11-slim'
    entrypoint: bash
    args:
      - -c
      - |
        pip install -r requirements.txt pytest >/dev/null
        pytest --maxfail=1 --disable-warnings -q

  # Step 2: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', '${_REGION}-docker.pkg.dev/$PROJECT_ID/firestore-adapter/firestore-adapter', '.']

  # Step 3: Push Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '${_REGION}-docker.pkg.dev/$PROJECT_ID/firestore-adapter/firestore-adapter']

  # Step 4: Deploy to Cloud Run (Authenticated access)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - run
      - deploy
      - firestore-adapter
      - --image
      - ${_REGION}-docker.pkg.dev/$PROJECT_ID/firestore-adapter/firestore-adapter
      - --region
      - ${_REGION}
      - --platform
      - managed
      - --service-account
      - rhea-app-sa@$PROJECT_ID.iam.gserviceaccount.com
      - --port
      - '8080'
      - --set-env-vars
      - PROJECT_ID=$PROJECT_ID

  # Step 5: Wait before sanity check
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - -c
      - |
        echo "Waiting for service to stabilize..."
        sleep 30

options:
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _REGION: europe-west1
